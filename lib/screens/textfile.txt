import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Firebase authentication package
import 'package:flutter/material.dart';
import 'package:mrdrop/screens/EmailVerification.dart';
import 'package:mrdrop/screens/ProfileCreate.dart';
import 'package:mrdrop/screens/home_screen.dart';
import 'package:mrdrop/widgets/keyboard.dart'; // Your custom keyboard widget

class VerificationCode extends StatefulWidget {
  final String verificationId; // Verification ID received from Firebase

  const VerificationCode({super.key, required this.verificationId});

  @override
  State<VerificationCode> createState() => _VerificationCodeState();
}

class _VerificationCodeState extends State<VerificationCode> {
  final List<TextEditingController> controllers = List.generate(6, (index) => TextEditingController());
  final List<FocusNode> focusNodes = List.generate(6, (index) => FocusNode());

  bool _isLoading = false;
  User? user = FirebaseAuth.instance.currentUser;
  String _inputText = "";
  String? Email = "nomail";

  void _handleKeyPress(String value) {
    setState(() {
      for (int i = 0; i < controllers.length; i++) {
        if (controllers[i].text.isEmpty) {
          controllers[i].text = value;
          if (i < controllers.length - 1) {
            focusNodes[i + 1].requestFocus(); // Move to the next textbox
          }
          break;
        }
      }
    });
  }

  void _handleBackspace() {
    setState(() {
      for (int i = controllers.length - 1; i >= 0; i--) {
        if (controllers[i].text.isNotEmpty) {
          controllers[i].clear();
          focusNodes[i].requestFocus(); // Move focus to the current textbox
          break;
        } else if (i > 0 && controllers[i - 1].text.isNotEmpty) {
          controllers[i - 1].clear();
          focusNodes[i - 1].requestFocus(); // Move focus to the previous textbox
          break;
        }
      }
    });
  }

  Future<String?> _checkRegister() async {
    if (user != null) {
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(user?.uid).get();
      Email = userDoc.data()?['email'].toString();

      if (userDoc.exists && userDoc.data()?['email'] != null) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => EmailVerification(
              Email: Email,
              uid: user!.uid,
            ),
          ),
        );
        return Email;
      }
    }
    return null;
  }

  String _getEnteredOTP() {
    return controllers.map((controller) => controller.text).join();
  }

  Future<bool> _checkEmailVerified() async {
    try {
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(user?.uid).get();
      if (userDoc['isEmailVerified'] == "true") {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => HomeScreen()),
        );
      }
      return true;
    } catch (e) {
      print("Error in Verification Code Screen: ${e.toString()}");
      return false;
    }
  }

  Future<void> _verifyOTP() async {
    setState(() => _isLoading = true);
    await _checkRegister();
    await _checkEmailVerified();

    String enteredOTP = _getEnteredOTP();
    if (enteredOTP.length != 6) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please enter a valid 6-digit OTP")),
      );
      return;
    }

    try {
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: widget.verificationId,
        smsCode: enteredOTP,
      );

      await FirebaseAuth.instance.signInWithCredential(credential);

      final user = FirebaseAuth.instance.currentUser;
      if (user!.emailVerified) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const HomeScreen()),
        );
      } else {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const ProfileCreatePage()),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Invalid OTP: $e")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Stack(
        children: [
          SafeArea(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  children: [
                    const SizedBox(height: 50),
                    Image.asset(
                      'assets/bgrlogo.png',
                      height: 100,
                    ),
                    const Text("Verification Code"),
                    const Padding(
                      padding: EdgeInsets.all(8.0),
                      child: Text(
                        "Enter The Verification Code Which Has Been Sent To You",
                        textAlign: TextAlign.center,
                        style: TextStyle(fontWeight: FontWeight.w100),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 20.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: List.generate(
                          6,
                          (index) => _otpTextField(
                            controller: controllers[index],
                            focusNode: focusNodes[index],
                          ),
                        ),
                      ),
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        _actionButton(
                          label: "Back",
                          color: const Color.fromARGB(255, 220, 204, 198),
                          onPressed: () => Navigator.pop(context),
                        ),
                        _actionButton(
                          label: "Next",
                          color: const Color.fromARGB(255, 189, 121, 96),
                          onPressed: _verifyOTP,
                        ),
                      ],
                    ),
                  ],
                ),
                SingleChildScrollView(
                  child: Container(
                    color: Colors.white,
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: CustomNumericKeyboard(
                        onKeyPressed: _handleKeyPress,
                        onBackspace: _handleBackspace,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton:
          _isLoading ? const CircularProgressIndicator() : null,
    );
  }

  Widget _otpTextField({
    required TextEditingController controller,
    required FocusNode focusNode,
  }) {
    return Container(
      width: 50,
      height: 60,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey),
        borderRadius: BorderRadius.circular(8),
      ),
      child: TextField(
        controller: controller,
        focusNode: focusNode,
        keyboardType: TextInputType.number,
        maxLength: 1,
        textAlign: TextAlign.center,
        readOnly: true, // Disable native keyboard
        decoration: const InputDecoration(
          border: InputBorder.none,
          counterText: "",
        ),
      ),
    );
  }

  Widget _actionButton({
    required String label,
    required Color color,
    required VoidCallback onPressed,
  }) {
    return SizedBox(
      width: 150,
      height: 50,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ButtonStyle(
          backgroundColor: MaterialStateProperty.all<Color>(color),
          shape: MaterialStateProperty.all<RoundedRectangleBorder>(
            RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12.0),
            ),
          ),
        ),
        child: Text(
          label,
          style: const TextStyle(color: Colors.white),
        ),
      ),
    );
  }
}
